apiVersion: v1
kind: Namespace
metadata:
  name: server1
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-server
  namespace: server1
data:
  server.conf: |
    server {
      bind_address = "0.0.0.0"
      bind_port = "8081"
      socket_path = "/tmp/spire-server/private/api.sock"
      trust_domain = "A.com"
      data_dir = "/run/spire/data"
      log_level = "DEBUG"
      #AWS requires the use of RSA.  EC cryptography is not supported
      ca_key_type = "rsa-2048"

      ca_subject = {
        country = ["JP"],
        organization = ["server1"],
        common_name = "A.com",
      }

      ca_ttl = "720h"
    }

    plugins {
      DataStore "sql" {
        plugin_data {
          database_type = "sqlite3"
          connection_string = "/run/spire/data/datastore.sqlite3"
        }
      }

      NodeAttestor "join_token" {
        plugin_data {
        }
      }

      KeyManager "disk" {
        plugin_data {
          keys_path = "/run/spire/data/keys.json"
        }
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8s-workload-registrar
  namespace: server1
data:
  k8s-workload-registrar.conf: |
    log_level = "debug"
    trust_domain = "A.com"
    server_socket_path = "/tmp/spire-server/private/api.sock"
    cluster = "demo-cluster"
    pod_controller = false
    add_svc_dns_names = false
    mode = "crd"
    leader_election = false
    webhook_enabled = false
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: spire-server
  namespace: server1
  labels:
    app: spire-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spire-server
  serviceName: spire-server
  template:
    metadata:
      namespace: server1
      labels:
        app: spire-server
    spec:
      serviceAccountName: spire-server
      containers:
        - name: spire-server
          image: ghcr.io/spiffe/spire-server:1.5.4
          args:
            - -config
            - /run/spire/config/server.conf
          ports:
            - containerPort: 8081
          volumeMounts:
            - name: spire-config
              mountPath: /run/spire/config
              readOnly: true
            - name: spire-data
              mountPath: /run/spire/data
              readOnly: false
            - name: spire-registration-socket
              mountPath: /tmp
              readOnly: false
          livenessProbe:
            exec:
              command: ["/opt/spire/bin/spire-server", "healthcheck"]
            failureThreshold: 2
            initialDelaySeconds: 15
            periodSeconds: 60
            timeoutSeconds: 3
          readinessProbe:
            exec:
              command: ["/opt/spire/bin/spire-server", "healthcheck", "--shallow"]
            initialDelaySeconds: 5
            periodSeconds: 5
        - name: k8s-workload-registrar
          image: gcr.io/spiffe-io/k8s-workload-registrar:1.5.4
          args:
            - -config
            - /run/spire/config/k8s-workload-registrar.conf
          env:
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - containerPort: 9443
              name: webhook
              protocol: TCP
          volumeMounts:
            - mountPath: /run/spire/config
              name: k8s-workload-registrar-config
              readOnly: true
            - name: spire-registration-socket
              mountPath: /tmp
              readOnly: false
      volumes:
        - name: spire-config
          configMap:
            name: spire-server
        - name: k8s-workload-registrar-config
          configMap:
            name: k8s-workload-registrar
        - name: spire-registration-socket
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: spire-data
        namespace: server1
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: spire-server
  namespace: server1
spec:
  ports:
    - name: grpc
      port: 8081
      targetPort: 8081
      protocol: TCP
  selector:
    app: spire-server
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spire-server
  namespace: server1
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: spire-server-configmap-role
  namespace: server1
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["patch", "get", "list"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: spire-server-configmap-role-binding
  namespace: server1
subjects:
- kind: ServiceAccount
  name: spire-server
  namespace: server1
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: spire-server-configmap-role
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: server1--spire-server-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: spire-server
  namespace: server1
roleRef:
  kind: ClusterRole
  name: spire-server-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: server1--k8s-workload-registrar-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-workload-registrar-role
subjects:
- kind: ServiceAccount
  name: spire-server
  namespace: server1
